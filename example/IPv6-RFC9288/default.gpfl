PROLOGUE
	INIT
		set(discard, "reject")
		set(nbPacket, 0)
		// Limit rate to 5 packet by hour for hop by hop header
		newInterrupt(3600, true,
			cond(read(48, 8) == 0x0 & nbPacket > 5,
				drop
			)
			set(nbPacket, 0)
		)

// Filtering policy based on the recommendation of [RFC9288](https://datatracker.ietf.org/doc/rfc9288/)
// IPv6 Header: [RFC8200](https://www.rfc-editor.org/rfc/rfc8200)
//  0                   1                   2                   3
//  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |Version| Traffic Class |              Flow Label               | 32
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |          Payload Length       |  Next Header  |   Hop Limit   | 64
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                                                               | 96
// +                                                               +
// |                                                               | 128
// +                        Source Address                         +
// |                                                               | 160
// +                                                               +
// |                                                               | 192
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                                                               | 224
// +                                                               +
// |                                                               | 256
// +                      Destination Address                      +
// |                                                               | 288
// +                                                               +
// |                                                               | 320
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// It is followed by the extension header that might contains options

FILTER
	set(nbPacket, nbPacket+1)
	
	cond(read(0, 4) == 6,
		set(nextHeader , read (48 , 8))
		
		set(nextEhStart, 320)
		set(optDataLen, 0)

		// While there is another eh
		iter(nextHeader != 59,
			// Hop by hop
			cond(nextHeader == 0x0,
				set(nextHeader, read(nextEhStart, 8))
				set(hdrExtLen, read(nextEhStart+8, 8))
				set(nextEhStart, nextEhStart+64+hdrExtLen*64)
				set(optDataLen, 0)
				set(totalEhLen, 0)
				iter(totalEhLen < hdrExtLen,
					set(optionType, read(nextEhStart+optDataLen+16, 8))
					set(optDataLen, read(nextEhStart+16+8, 8))
					set(totalEhLen, totalEhLen+optDataLen)
					// Jumbo Payload | RPL Option | Endpoint Identification | Line Identification Option | Deprecated | RFC3962 Experiment
					cond(optionType == 0xc2 | optionType == 0x23 | optionType == 0x63 | optionType == 0x8a | optionType == 0x8c | optionType == 0x4d
						| optionType == 0x1e | optionType == 0x3e | optionType == 0x5e | optionType == 0x7e | optionType == 0x9e | optionType == 0xbe | optionType == 0xde | optionType == 0xfe,
						drop
					)
				)
			)

			// Routing
			cond(nextHeader == 0x2b,
				set(nextHeader, read(nextEhStart, 8))
				set(nextEhStart, nextEhStart+64+read(nextEhStart+8, 8)*64)
				set(type, read(nextEhStart+16, 8))
				cond(type == 0b0 | type == 0b1,
					drop
				)
			)

			// Fragment
			cond(nextHeader == 0x2c,
				set(nextHeader, read(nextEhStart, 8))
				set(nextEhStart, nextEhStart+64)
			)

			// Encapsuling Security Payload
			cond(nextHeader == 0x32,
				set(nextHeader, 59)
			)

			// Authentification Header
			cond(nextHeader == 0x33,
				set(nextHeader, read(nextEhStart, 8))
				set(nextEhStart, nextEhStart+64+(read(nextEhStart+8, 8)*32))
			)

			// Destination Opts
			cond(nextHeader == 0x3c,
				set(nextHeader, read(nextEhStart, 8))
				set(hdrExtLen, read(nextEhStart+8, 8))
				set(nextEhStart, nextEhStart+64+hdrExtLen*64)
				set(optDataLen, 0)
				set(totalEhLen, 0)
				iter(totalEhLen < hdrExtLen,
					set(optionType, read(nextEhStart+optDataLen+16, 8))
					set(optDataLen, read(nextEhStart+16+8, 8))
					set(totalEhLen, totalEhLen+optDataLen)
					// Endpoint Identification | Line Identification Option | RFC3962 Experiment
					cond(optionType == 0x8a | optionType == 0x8c
						| optionType == 0x1e | optionType == 0x3e | optionType == 0x5e | optionType == 0x7e | optionType == 0x9e | optionType == 0xbe | optionType == 0xde | optionType == 0xfe,
						drop
					)
				)
			)

			// Mobility Header
			cond(nextHeader == 0x87,
				set(nextHeader, read(nextEhStart, 8))
				set(nextEhStart, nextEhStart+64+read(nextEhStart+8, 8)*64)
			)

			// Host Identity Protocol 
			cond(nextHeader == 0x8b,
				set(nextHeader, read(nextEhStart, 8))
				set(nextEhStart, nextEhStart+64+read(nextEhStart+8, 8)*8)
			)

			// Shim 6 Protocol
			cond(nextHeader == 0x8c,
				set(nextHeader, read(nextEhStart, 8))
				set(nextEhStart, nextEhStart+64+read(nextEhStart+8, 8)*64)
			)

			// Experimentation and testing
			cond(nextHeader == 253 | nextHeader == 254,
				drop
			)

			// Unkown EH
			cond(nextHeader == 0 | nextHeader == 43 | nextHeader == 44 | nextHeader == 50 | nextHeader == 51
				| nextHeader == 60 | nextHeader == 135 | nextHeader == 139 | nextHeader == 140,
				drop
			)
		)
		accept
	)

	alarm("Not an IPv6 packet")
